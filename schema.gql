type Query {
    products(status: ProductStatus): [Product!]!  #it can not be null or [null]
    categories: [Category!]!
    product(id: ID!): Product
    category(id: ID!): Category
}
#
# Int Float String Boolean ID
#
# greeting: String!
#

enum ProductStatus {
    IN_STOCK
    OUT_OF_STOCK
    BACKORDERED
}

interface ProductVariant {
    id: ID!
    variantName: String!
    price: Float!
}

type SizeVariant implements ProductVariant{
    id: ID!
    variantName: String!
    price: Float!
    size: String!
}

type ColorVariant implements ProductVariant{
    id: ID!
    variantName: String!
    price: Float!
    color: String!
}

union ProductDiscount = FixedAmountDiscount | PercentageDiscount | BOGODiscount

type FixedAmountDiscount {
    id: ID!
    amount: Float!
}

type PercentageDiscount {
    id: ID!
    percentage: Float!
}

type BOGODiscount {
    id: ID!
    buy: Int!
    get: Int!
}

type Product {
    id: ID!
    name: String!
    description: String!
    price: Float!
    category: Category!
    variants: [ProductVariant!]!
    discount: ProductDiscount
    status: ProductStatus!
}

type Category {
    id: ID!
    name: String!
    products: [Product!]!
}
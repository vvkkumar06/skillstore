scalar Email

type Query {
    products(status: ProductStatus): [Product!]!  #it can not be null or [null]
    categories: [Category!]!
    product(id: ID!): Product
    category(id: ID!): Category
    users: [User!]!
    user(email: Email!): User
}

type Mutation {
    createUser(createUserData: CreateUserInput!): User
}

input CreateUserInput {
    username: String!
    email: Email!
    role: Role = USER
}

###  Enums

enum ProductStatus {
 IN_STOCK
 OUT_OF_STOCK
 BACKORDERED
}

enum Role {
    USER
    ADMIN
}

interface ProductVariant {
    id: ID!
    variantName: String!
    price: Float!
}

type SizeVariant implements ProductVariant {
    id: ID!
    variantName: String!
    price: Float!
    size: String!
}

type ColorVariant implements ProductVariant {
    id: ID!
    variantName: String!
    price: Float!
    color: String!
}

union ProductDiscount = FixedAmountDiscount | PercentageDiscount | BOGODiscount

type FixedAmountDiscount {
    id: ID!
    amount: Float!
}

type PercentageDiscount {
    id: ID!
    percentage: Float!
}

type BOGODiscount {
    id: ID!
    buy: Int!
    get: Int!
}

type Product {
    id: ID!
    name: String!
    description: String!
    price: Float!
    category: Category!
    variants: [ProductVariant!]!
    discounts: ProductDiscount
    status: ProductStatus!
}

type Category {
    id: ID!
    name: String!
    products: [Product!]!
}

type User {
    id: ID!
    username: String!
    email: Email!
    role: Role!
}